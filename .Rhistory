rm(list = ls())
library(tidyverse)
library(lubridate)
# theming
library(ggsci)
library(hrbrthemes)
library(cowplot)
library(showtext)
library(ggthemes)
library(grid)
library(gghighlight)
# SPECIFY TREATMENT AND CONTROL PERIODS
control_period <- c("20162017", '20172018')
treatment_period <- "20182019"
matched <- FALSE
uniform_analysis <- FALSE
normal_analysis <- FALSE
#SPECIFY WHETHER PLOTS AND TABLES SHOULD BE SAVED AS PLACEBO OR AS MAIN RESULTS
if(treatment_period=="20192020" & length(control_period) == 3) {
tables_path <- "tables/"
plots_path <- "plots/"
models_path <- "data/final/"
if(matched) {
tables_path <- "tables/robust/matched/"
plots_path <- "plots/robust/matched/"
models_path <- "data/final/robust/matched/"
}
#SPECIFY WHETHER PLOTS AND TABLES SHOULD BE SAVED AS PLACEBO, ROBUST, OR AS MAIN RESULTS
} else if(treatment_period=="20192020") {
tables_path <- "tables/robust/"
plots_path <- "plots/robust/"
models_path <- "data/final/robust/"
}  else if(treatment_period!="20192020") {
tables_path <- "tables/placebo/"
plots_path <- "plots/placebo/"
models_path <- "data/final/placebo/"
}
#TRANSFORM TO UNIFORM
if (uniform_analysis) {
tables_path <- paste0(tables_path,  "uniform/")
plots_path <- paste0(plots_path,  "uniform/")
models_path <-  paste0(models_path,  "uniform/")
uni_str <- "_uniform"
} else if (normal_analysis) {
tables_path <- paste0(tables_path,  "normal/")
plots_path <- paste0(plots_path,  "normal/")
models_path <-  paste0(models_path,  "normal/")
uni_str <- "_normal"
} else {
uni_str <- ""
}
# READ DATA
# Test data
tests <- read_rds("data/edit/tests.rds")
schools <- readRDS("data/edit/schools.rds")
pupils_raw <- readRDS("data/raw/pupil4.rds") %>%
mutate(school_id = as.character(school_id))
total_df <- readRDS("data/edit/analysis_uniform.rds")
# Models
read_and_edit <- function(path_to_rds_file, type_name = NULL) {
data <- readRDS(path_to_rds_file) %>%
mutate(type = type_name) %>%
mutate_at(vars(estimate:p.value, nobs), as.numeric)
return(data)
}
full_models <- c()
for(i in c("overall", "grade", "ses", "female", "ability")) {
data <- read_and_edit(paste0(models_path, "models_", i, "_",
paste0(control_period, collapse = ""), "_", treatment_period, ".rds"),
type_name = i) %>%
mutate(conf.low = as.numeric(conf.low), conf.high = as.numeric(conf.high), df = as.numeric(df),
nclusters = as.numeric(nclusters))
full_models <- bind_rows(full_models, data)
}
# NUMBER OF TESTS ACROSS YEARS ----------------------------------------------------------------
tests <- tests %>%
filter(school_year > 2015) %>%
mutate(date_taken = as.Date(gsub("\\d{4}", "2020", date_taken)))
treat_df <- tests
start_year <- 2019
end_year <- 2020
treat_df <- tests %>%
filter((date_taken > as.Date(paste0(start_year, "-08-15"))) &
(date_taken < as.Date(paste0(end_year, "-08-15")))) %>%
mutate(date_taken = as.Date(date_taken))
ggplot(treat_df) +
geom_density(data = treat_df %>% filter(date_taken <= as.Date("2020-09-01")),
aes(y = ..scaled.., x = date_taken, color = as.factor(school_year), size = as.factor(school_year))) +
labs(y = "Number of weekly tests relative to maximum number observed within year", x = "", title = "") +
geom_text(data = data.frame(x = as.Date("2020-03-15"), y = 0.95,
label = "Schools close"),
aes(x, y, label = label), angle = 270, vjust = -1, size = 5) +
geom_text(data = data.frame(x = as.Date("2020-05-25"), y = 0.95,
label = "Schools re-open"),
aes(x, y, label = label), angle = 270, vjust = -1, size = 5) +
geom_vline(xintercept = as.Date("2020-03-15"), linetype = "dashed") +
geom_vline(xintercept = as.Date("2020-05-25"), linetype = "dashed") +
xlim(as.Date("2020-01-01"), as.Date("2020-08-01")) +
scale_x_date(date_breaks = "months" , date_labels = "%d-%b") +
cowplot::theme_cowplot(font_size = 15) + ggplot2::theme(legend.position = "top") +
scale_color_aaas(name = "Year", labels = c("2017", "2018", "2019", "2020")) +
scale_size_manual(values=c(0.5, 0.5, 0.5, 0.8), guide = "none")
ggsave(filename = "plots/desc/date_taken_all_years_rel.pdf",
last_plot())
## --- Description of tests scores
tests_uni <- readRDS("data/edit/analysis_raw_scores_uniform.rds") %>%
filter(year != "20202021")
ggplot(tests_uni, aes(x = percentile_score, color = year)) + geom_density(trim = T, bw=4) +
scale_color_aaas(name="Year", labels = c("2017", "2018", "2019", "2020")) +
labs(y = "Density", x = "Percentile score") +
cowplot::theme_cowplot(font_size = 15) + theme(legend.position="top") + background_grid()
ggsave(filename = "plots/desc/test_score_distribtuion.pdf",
last_plot())
# COEFFICIENT PLOTS ---------------------------------------------------------------------------
# LABEL PLOTS
full_models <- full_models %>%
mutate(type = ifelse(type == "overall" & model!="ALL", model, type)) %>%
filter(term=="treat"|str_detect(term, "full_treat")) %>%
mutate(label = ifelse(model=="ALL" & type=="overall", "",
ifelse(type=="RW", "Maths",
ifelse(type=="TBL", "Reading",
ifelse(type=="SP", "Spelling",
ifelse(type=="DMT", "Info. Processing",
ifelse(str_detect(model, "7"), "Grade 7",
ifelse(str_detect(model, "6"), "Grade 6",
ifelse(str_detect(model, "5"), "Grade 5",
ifelse(str_detect(model, "4"), "Grade 4",
ifelse(type=="ses" & term=="treat", "High",
ifelse(type=="ses" & term=="full_treat:seslow", "Low",
ifelse(type=="ses" & term=="full_treat:sesvery low", "Lowest",
ifelse(type=="female" & term=="treat",  "Boys",
ifelse(type=="female" & term=="full_treat:female", "Girls",
ifelse(type=="ability" & term=="treat", "Top",
ifelse(type=="ability" & term=="full_treat:abilitymiddle",
"Middle",
ifelse(type=="ability" & term=="full_treat:abilitylow",
"Bottom", NA))))))))))))))))),
label = factor(label, levels = c("", "Total","High", "Low", "Lowest", "Boys", "Girls",
"Maths", "Spelling", "Reading", "Top", "Middle", "Bottom",
"Grade 7", "Grade 6", "Grade 5", "Grade 4")),
type = car::recode(type, "'overall'='Total'; c('RW', 'TBL', 'SP')='Subject';
'grade'='School Grade'; 'ses'='Parental Educ.'; 'female' = 'Sex';
'ability' = 'Prior Perf.'"),
type = factor(type, levels = c("", "Total", "Parental Educ.", "Sex",
"Prior Perf.","Subject", "School Grade")))
# MAIN PLOT -----
full_models_all <- full_models %>%
filter(str_detect(model, "ALL") | type == "Subject")
g1 <- full_models_all %>%
ggplot(aes(x = reorder(label, -as.numeric(label)), y = estimate, color = type, shape = type)) +
geom_point(size = 2.5) +
geom_errorbar(aes(ymin =
estimate - 1.96 * std.error,
ymax = estimate + 1.96 * std.error), width = 0, size = 0.7) +
geom_hline(yintercept = 0, linetype = 2, color = "darkgrey") +
scale_y_continuous(minor_breaks = seq(-5.5 , 1.5, 0.5),
breaks = round(seq(-5, 1.5, 1), 2),
limits = c(-5.2, 1.5)) +
cowplot::theme_cowplot(font_size = 15) +
coord_flip() +
scale_color_aaas() +
scale_fill_aaas() +
ylab("Learning loss (percentiles)") +
xlab("")
# ADD FACETS
if (matched) {
g1 <- g1 +
facet_grid(type ~ model_type, scales = "free", space = "free", switch="y") +
scale_y_continuous(minor_breaks = seq(-5.5 , 1.5, 1),
breaks = round(seq(-5, 1.5, 1), 2),
limits = c(-5.2, 1.3))
} else {
g1 <- g1 +
facet_grid(type ~ ., scales = "free", space = "free", switch="y")
}
g1 +
theme(panel.grid.major.x = element_line(size = 0.5, linetype = 'dotted',
colour = "lightgrey"),
panel.grid.minor.x = element_line(size = 0.25, linetype = 'dotted',
colour = "lightgrey"),
strip.placement = "outside",
strip.text.y = element_text(face = "bold", hjust=0.5, vjust=0.5),
strip.background=element_rect(fill = NA, color = "black", size = 1.2),
legend.position = "none",
panel.spacing.x=unit(1, "lines"),
panel.spacing.y=unit(0.1, "lines"),
panel.border = element_rect(color = "lightgrey", fill = NA, size = 0.5))
# SAVE PLOT
ggsave(paste0(plots_path, "ll_full_", paste(control_period, collapse = ""),
"_", treatment_period, ".pdf"),  width = 9)
# DMT PLOT ------------------------------------------------------------------------------------
if(matched == FALSE) {
full_models_dmt <- full_models %>%
filter(str_detect(model, "DMT")) %>%
mutate(type = replace_na(type, "Total"),
label = replace_na(label, ""))
g1 <- full_models_dmt %>%
ggplot(aes(x = reorder(label, -as.numeric(label)), y = estimate, color = type, shape = type)) +
geom_point(size = 2.5) +
geom_errorbar(aes(ymin =
estimate - 1.96 * std.error,
ymax = estimate + 1.96 * std.error), width = 0, size = 0.7) +
geom_hline(yintercept = 0, linetype = 2, color = "darkgrey") +
facet_grid(type ~ ., scales = "free", space = "free", switch="y") +
scale_y_continuous(minor_breaks = seq(-4.5 , 1, 0.5),
breaks = round(seq(-4.5, 1, 1), 2),
limits = c(-5, 1)) +
cowplot::theme_cowplot(font_size = 14) +
coord_flip() +
scale_color_aaas() +
scale_fill_aaas() +
ylab("Learning loss (percentiles)") +
xlab("")
g1 +
theme(panel.grid.major.x = element_line(size = 0.5, linetype = 'dotted',
colour = "lightgrey"),
panel.grid.minor.x = element_line(size = 0.25, linetype = 'dotted',
colour = "lightgrey"),
strip.placement = "outside",
strip.text.y = element_text(face = "bold", hjust=0.5, vjust=0.5),
strip.background=element_rect(fill = NA, color = "black", size = 1.5),
legend.position = "none",
panel.spacing.x=unit(0.08, "lines"),
panel.spacing.y=unit(0.1, "lines"),
panel.border = element_rect(color = "lightgrey", fill = NA, size = 0.5))
# SAVE PLOT
ggsave(paste0(plots_path, "dmt_full_", paste(control_period, collapse = ""),
"_", treatment_period, ".pdf"),  width = 9)
}
# DESCRIPTIVE PLOT OF Y  ----------------------------------------------------------------------
treat_melt <- total_df %>%
dplyr::select(pupil_id, RW, TBL, SP, year, ALL) %>%
reshape2::melt(id.vars = c("pupil_id", "year"), measure.vars = c("RW", "TBL", "SP", "ALL")) %>%
mutate(variable = ifelse(variable=="ALL", "Composite",
ifelse(variable=="RW", "Maths",
ifelse(variable=="TBL", "Reading",
ifelse(variable=="SP", "Spelling", NA)))),
year = ifelse(year=="20162017", "2017",
ifelse(year=="20172018", "2018",
ifelse(year=="20182019", "2019",
ifelse(year=="20192020", "2020", NA)))),
year = factor(year, levels = c("2017", "2018", "2019", "2020")))
rm(list = ls())
library(tidyverse)
library(lubridate)
# theming
library(ggsci)
library(hrbrthemes)
library(cowplot)
library(showtext)
library(ggthemes)
library(grid)
library(gghighlight)
# SPECIFY TREATMENT AND CONTROL PERIODS
control_period <- c("20162017", '20172018')
treatment_period <- "20182019"
matched <- FALSE
uniform_analysis <- FALSE
normal_analysis <- FALSE
#SPECIFY WHETHER PLOTS AND TABLES SHOULD BE SAVED AS PLACEBO OR AS MAIN RESULTS
if(treatment_period=="20192020" & length(control_period) == 3) {
tables_path <- "tables/"
plots_path <- "plots/"
models_path <- "data/final/"
if(matched) {
tables_path <- "tables/robust/matched/"
plots_path <- "plots/robust/matched/"
models_path <- "data/final/robust/matched/"
}
#SPECIFY WHETHER PLOTS AND TABLES SHOULD BE SAVED AS PLACEBO, ROBUST, OR AS MAIN RESULTS
} else if(treatment_period=="20192020") {
tables_path <- "tables/robust/"
plots_path <- "plots/robust/"
models_path <- "data/final/robust/"
}  else if(treatment_period!="20192020") {
tables_path <- "tables/placebo/"
plots_path <- "plots/placebo/"
models_path <- "data/final/placebo/"
}
#TRANSFORM TO UNIFORM
if (uniform_analysis) {
tables_path <- paste0(tables_path,  "uniform/")
plots_path <- paste0(plots_path,  "uniform/")
models_path <-  paste0(models_path,  "uniform/")
uni_str <- "_uniform"
} else if (normal_analysis) {
tables_path <- paste0(tables_path,  "normal/")
plots_path <- paste0(plots_path,  "normal/")
models_path <-  paste0(models_path,  "normal/")
uni_str <- "_normal"
} else {
uni_str <- ""
}
# Test data
tests <- read_rds("data/edit/tests.rds")
